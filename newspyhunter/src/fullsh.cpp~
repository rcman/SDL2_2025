#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_mixer.h>
#include <iostream>
#include <vector>

// Screen dimensions
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;

// Player car settings
const int CAR_WIDTH = 60;
const int CAR_HEIGHT = 30;
const int CAR_SPEED = 5;

// Enemy car settings
const int ENEMY_CAR_WIDTH = 50;
const int ENEMY_CAR_HEIGHT = 30;
const int ENEMY_CAR_SPEED = 3;

// 18-wheeler settings
const int TRUCK_WIDTH = 100;
const int TRUCK_HEIGHT = 60;
const int TRUCK_SPEED = 2;

// Bullet settings
const int BULLET_SPEED = 10;

// Function declarations
bool init();
bool loadMedia();
void close();
bool checkCollision(SDL_Rect a, SDL_Rect b);

// SDL objects
SDL_Window* gWindow = nullptr;
SDL_Renderer* gRenderer = nullptr;

// Texture wrapper class
class LTexture {
public:
    LTexture();
    ~LTexture();

    bool loadFromFile(std::string path);
    void free();
    void render(int x, int y, SDL_Rect* clip = nullptr, double angle = 0.0, SDL_Point* center = nullptr, SDL_RendererFlip flip = SDL_FLIP_NONE);
    int getWidth();
    int getHeight();

private:
    SDL_Texture* mTexture;
    int mWidth;
    int mHeight;
};

// The player-controlled car
class Car {
public:
    // Initializes the variables
    Car();

    // Takes key presses and adjusts the car's velocity
    void handleEvent(SDL_Event& e);

    // Moves the car
    void move();

    // Shows the car on the screen
    void render();

    // Gets the collision box
    SDL_Rect getCollider();

    // Sets the car's position
    void setPosition(int x, int y);

private:
    // The X and Y offsets of the car
    int mPosX, mPosY;

    // The velocity of the car
    int mVelX;

    // Collision box of the car
    SDL_Rect mCollider;
};

// The bullet that the car fires
class Bullet {
public:
    // The dimensions of the bullet
    static const int BULLET_WIDTH = 5;
    static const int BULLET_HEIGHT = 10;

    // Initializes the variables
    Bullet(int x, int y);

    // Moves the bullet
    void move();

    // Shows the bullet on the screen
    void render();

    // Gets the collision box
    SDL_Rect getCollider();

    // Whether the bullet is active
    bool isActive() const { return active; }

    // Sets the bullet's active state
    void setActive(bool active) { this->active = active; }

private:
    // The X and Y offsets of the bullet
    int mPosX, mPosY;

    // The velocity of the bullet
    int mVelX;

    // Collision box of the bullet
    SDL_Rect mCollider;

    // Whether the bullet is active
    bool active;
};

// The enemy car
class EnemyCar {
public:
    // Initializes the variables
    EnemyCar(int lane);

    // Moves the enemy car
    void move();

    // Shows the enemy car on the screen
    void render();

    // Gets the collision box
    SDL_Rect getCollider();

    // Whether the enemy car is alive
    bool isAlive() const { return alive; }

    // Sets the enemy car's alive state
    void setAlive(bool alive) { this->alive = alive; }

private:
    // The X and Y offsets of the enemy car
    int mPosX, mPosY;

    // The velocity of the enemy car
    int mVelY;

    // Collision box of the enemy car
    SDL_Rect mCollider;

    // Whether the enemy car is alive
    bool alive;
};

// The 18-wheeler truck
class Truck {
public:
    // Initializes the variables
    Truck();

    // Moves the truck
    void move();

    // Shows the truck on the screen
    void render();

    // Gets the collision box
    SDL_Rect getCollider();

    // Whether the truck is on screen
    bool isOnScreen() const { return onScreen; }

    // Sets the truck's on-screen state
    void setOnScreen(bool onScreen) { this->onScreen = onScreen; }

private:
    // The X and Y offsets of the truck
    int mPosX, mPosY;

    // The velocity of the truck
    int mVelY;

    // Collision box of the truck
    SDL_Rect mCollider;

    // Whether the truck is on screen
    bool onScreen;
};

// Globally used textures
LTexture gCarTexture;
LTexture gEnemyCarTexture;
LTexture gTruckTexture;
LTexture gBulletTexture;
LTexture gBackgroundTexture;

// Sound effects
Mix_Chunk *gEngineSound = nullptr;
Mix_Chunk *gShootSound = nullptr;
Mix_Chunk *gExplosionSound = nullptr;

LTexture::LTexture() {
    // Initialize
    mTexture = nullptr;
    mWidth = 0;
    mHeight = 0;
}

LTexture::~LTexture() {
    // Deallocate
    free();
}

bool LTexture::loadFromFile(std::string path) {
    // Get rid of preexisting texture
    free();

    // The final texture
    SDL_Texture* newTexture = nullptr;

    // Load image at specified path
    SDL_Surface* loadedSurface = IMG_Load(path.c_str());
    if (loadedSurface == nullptr) {
        std::cerr << "Unable to load image " << path << "! SDL_image Error: " << IMG_GetError() << std::endl;
    } else {
        // Color key image
        SDL_SetColorKey(loadedSurface, SDL_TRUE, SDL_MapRGB(loadedSurface->format, 0, 0xFF, 0xFF));

        // Create texture from surface pixels
        newTexture = SDL_CreateTextureFromSurface(gRenderer, loadedSurface);
        if (newTexture == nullptr) {
            std::cerr << "Unable to create texture from " << path << "! SDL Error: " << SDL_GetError() << std::endl;
        } else {
            // Get image dimensions
            mWidth = loadedSurface->w;
            mHeight = loadedSurface->h;
        }

        // Get rid of old loaded surface
        SDL_FreeSurface(loadedSurface);
    }

    // Return success
    mTexture = newTexture;
    return mTexture != nullptr;
}

void LTexture::free() {
    // Free texture if it exists
    if (mTexture != nullptr) {
        SDL_DestroyTexture(mTexture);
        mTexture = nullptr;
        mWidth = 0;
        mHeight = 0;
    }
}

void LTexture::render(int x, int y, SDL_Rect* clip, double angle, SDL_Point* center, SDL_RendererFlip flip) {
    // Set rendering space and render to screen
    SDL_Rect renderQuad = { x, y, mWidth, mHeight };

    // Set clip rendering dimensions
    if (clip != nullptr) {
        renderQuad.w = clip->w;
        renderQuad.h = clip->h;
    }

    // Render to screen
    SDL_RenderCopyEx(gRenderer, mTexture, clip, &renderQuad, angle, center, flip);
}

int LTexture::getWidth() {
    return mWidth;
}

int LTexture::getHeight() {
    return mHeight;
}

Car::Car() {
    // Initialize the offsets
    mPosX = SCREEN_WIDTH / 2 - CAR_WIDTH / 2;
    mPosY = SCREEN_HEIGHT - CAR_HEIGHT - 10;

    // Set collision box dimension
    mCollider.w = CAR_WIDTH;
    mCollider.h = CAR_HEIGHT;

    // Initialize the velocity
    mVelX = 0;
}

void Car::handleEvent(SDL_Event& e) {
    // If a key was pressed
    if (e.type == SDL_KEYDOWN && e.key.repeat == 0) {
        // Adjust the velocity
        switch (e.key.keysym.sym) {
        case SDLK_LEFT: mVelX -= CAR_SPEED; break;
        case SDLK_RIGHT: mVelX += CAR_SPEED; break;
        }
    }
    // If a key was released
    else if (e.type == SDL_KEYUP && e.key.repeat == 0) {
        // Adjust the velocity
        switch (e.key.keysym.sym) {
        case SDLK_LEFT: mVelX += CAR_SPEED; break;
        case SDLK_RIGHT: mVelX -= CAR_SPEED; break;
        }
    }
}

void Car::move() {
    // Move the car left or right
    mPosX += mVelX;
    mCollider.x = mPosX;

    // Keep the car in bounds
    if ((mPosX < 0) || (mPosX + CAR_WIDTH > SCREEN_WIDTH)) {
        // Move back
        mPosX -= mVelX;
        mCollider.x = mPosX;
    }
}

void Car::render() {
    // Show the car
    gCarTexture.render(mPosX, mPosY);
}

SDL_Rect Car::getCollider() {
    return mCollider;
}

void Car::setPosition(int x, int y) {
    mPosX = x;
    mPosY = y;
    mCollider.x = mPosX;
    mCollider.y = mPosY;
}

Bullet::Bullet(int x, int y) {
    // Initialize the offsets
    mPosX = x;
    mPosY = y;

    // Set collision box dimension
    mCollider.w = BULLET_WIDTH;
    mCollider.h = BULLET_HEIGHT;

    // Initialize the velocity
    mVelX = 0;
    mVelY = -BULLET_SPEED;

    // Initialize the bullet as active
    active = true;
}

void Bullet::move() {
    // Move the bullet up
    mPosY += mVelY;
    mCollider.y = mPosY;

    // If the bullet went off screen, deactivate it
    if (mPosY < 0) {
        active = false;
    }
}

void Bullet::render() {
    // Show the bullet
    gBulletTexture.render(mPosX, mPosY);
}

SDL_Rect Bullet::getCollider() {
    return mCollider;
}

EnemyCar::EnemyCar(int lane) {
    // Initialize the offsets based on lane
    mPosX = lane * (SCREEN_WIDTH / 3) + (SCREEN_WIDTH / 6) - ENEMY_CAR_WIDTH / 2;
    mPosY = -ENEMY_CAR_HEIGHT;

    // Set collision box dimension
    mCollider.w = ENEMY_CAR_WIDTH;
    mCollider.h = ENEMY_CAR_HEIGHT;

    // Initialize the velocity
    mVelY = ENEMY_CAR_SPEED;

    // Initialize the enemy car as alive
    alive = true;
}

void EnemyCar::move() {
    // Move the enemy car down
    mPosY += mVelY;
    mCollider.y = mPosY;

    // If the enemy car went off screen, deactivate it
    if (mPosY > SCREEN_HEIGHT) {
        alive = false;
    }
}

void EnemyCar::render() {
    // Show the enemy car
    gEnemyCarTexture.render(mPosX, mPosY);
}

SDL_Rect EnemyCar::getCollider() {
    return mCollider;
}

Truck::Truck() {
    // Initialize the offsets
    mPosX = SCREEN_WIDTH / 2 - TRUCK_WIDTH / 2;
    mPosY = -TRUCK_HEIGHT;

    // Set collision box dimension
    mCollider.w = TRUCK_WIDTH;
    mCollider.h = TRUCK_HEIGHT;

    // Initialize the velocity
    mVelY = TRUCK_SPEED;

    // Initialize the truck as off screen
    onScreen = false;
}

void Truck::move() {
    // Move the truck down
    mPosY += mVelY;
    mCollider.y = mPosY;

    // If the truck went off screen, deactivate it
    if (mPosY > SCREEN_HEIGHT) {
        onScreen = false;
    }
}

void Truck::render() {
    // Show the truck
    gTruckTexture.render(mPosX, mPosY);
}

SDL_Rect Truck::getCollider() {
    return mCollider;
}

bool init() {
    // Initialization flag
    bool success = true;

    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO) < 0) {
        std::cerr << "SDL could not initialize! SDL Error: " << SDL_GetError() << std::endl;
        success = false;
    } else {
        // Set texture filtering to linear
        if (!SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1")) {
            std::cerr << "Warning: Linear texture filtering not enabled!" << std::endl;
        }

        // Create window
        gWindow = SDL_CreateWindow("Spy Hunter", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
        if (gWindow == nullptr) {
            std::cerr << "Window could not be created! SDL Error: " << SDL_GetError() << std::endl;
            success = false;
        } else {
            // Create vsynced renderer for window
            gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
            if (gRenderer == nullptr) {
                std::cerr << "Renderer could not be created! SDL Error: " << SDL_GetError() << std::endl;
                success = false;
            } else {
                // Initialize renderer color
                SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);

                // Initialize PNG loading
                int imgFlags = IMG_INIT_PNG;
                if (!(IMG_Init(imgFlags) & imgFlags)) {
                    std::cerr << "SDL_image could not initialize! SDL_image Error: " << IMG_GetError() << std::endl;
                    success = false;
                }

                // Initialize SDL_mixer
                if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048) < 0) {
                    std::cerr << "SDL_mixer could not initialize! SDL_mixer Error: " << Mix_GetError() << std::endl;
                    success = false;
                }
            }
        }
    }

    return success;
}

bool loadMedia() {
    // Loading success flag
    bool success = true;

    // Load car texture
    if (!gCarTexture.loadFromFile("car.bmp")) {
        std::cerr << "Failed to load car texture!" << std::endl;
        success = false;
    }

    // Load enemy car texture
    if (!gEnemyCarTexture.loadFromFile("enemy_car.bmp")) {
        std::cerr << "Failed to load enemy car texture!" << std::endl;
        success = false;
    }

    // Load truck texture
    if (!gTruckTexture.loadFromFile("truck.bmp")) {
        std::cerr << "Failed to load truck texture!" << std::endl;
        success = false;
    }

    // Load bullet texture
    if (!gBulletTexture.loadFromFile("bullet.bmp")) {
        std::cerr << "Failed to load bullet texture!" << std::endl;
        success = false;
    }

    // Load background texture
    if (!gBackgroundTexture.loadFromFile("background.bmp")) {
        std::cerr << "Failed to load background texture!" << std::endl;
        success = false;
    }

    // Load sound effects
    gEngineSound = Mix_LoadWAV("engine.wav");
    if (gEngineSound == nullptr) {
        std::cerr << "Failed to load engine sound effect! SDL_mixer Error: " << Mix_GetError() << std::endl;
        success = false;
    }

    gShootSound = Mix_LoadWAV("shoot.wav");
    if (gShootSound == nullptr) {
        std::cerr << "Failed to load shoot sound effect! SDL_mixer Error: " << Mix_GetError() << std::endl;
        success = false;
    }

    gExplosionSound = Mix_LoadWAV("explosion.wav");
    if (gExplosionSound == nullptr) {
        std::cerr << "Failed to load explosion sound effect! SDL_mixer Error: " << Mix_GetError() << std::endl;
        success = false;
    }

    return success;
}
int main(int argc, char* args[]) {
    // Start up SDL and create window
    if (!init()) {
        std::cerr << "Failed to initialize!" << std::endl;
    } else {
        // Load media
        if (!loadMedia()) {
            std::cerr << "Failed to load media!" << std::endl;
        } else {
            bool quit = false;
            SDL_Event e;

            // Create the player car
            Car playerCar;

            // Create a vector to hold bullets
            std::vector<Bullet> bullets;

            // Create a vector to hold enemy cars
            std::vector<EnemyCar> enemyCars;
            enemyCars.push_back(EnemyCar(0));  // Example: spawn one enemy car in the first lane

            // Game loop
            while (!quit) {
                // Handle events on queue
                while (SDL_PollEvent(&e) != 0) {
                    if (e.type == SDL_QUIT) {
                        quit = true;
                    }

                    // Handle player input
                    playerCar.handleEvent(e);
                }

                // Move the player car
                playerCar.move();

                // Move the bullets
                for (auto& bullet : bullets) {
                    bullet.move();
                    if (!bullet.isActive()) {
                        // Remove inactive bullets
                        bullet.setActive(false);
                    }
                }

                // Move the enemy cars
                for (auto& enemyCar : enemyCars) {
                    enemyCar.move();
                }

                // Clear screen
                SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
                SDL_RenderClear(gRenderer);

                // Render background
                gBackgroundTexture.render(0, 0);

                // Render the player car
                playerCar.render();

                // Render bullets
                for (const auto& bullet : bullets) {
                    bullet.render();
                }

                // Render enemy cars
                for (const auto& enemyCar : enemyCars) {
                    enemyCar.render();
                }

                // Update screen
                SDL_RenderPresent(gRenderer);
            }
        }
    }

    // Free resources and close SDL
    close();

    return 0;
}

void close() {
    // Free loaded images
    gCarTexture.free();
    gEnemyCarTexture.free();
    gTruckTexture.free();
    gBulletTexture.free();
    gBackgroundTexture.free();

    // Free the sound effects

