#include <iostream>
#include <fstream>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <algorithm>

// Constants
const int TILE_SIZE = 32;
const int SCREEN_WIDTH = 800;  // 25 blocks across
const int SCREEN_HEIGHT = 608; // 19 blocks down
const int MAP_WIDTH = 25;      // 25 blocks horizontally
const int MAP_HEIGHT = 19;     // 19 blocks vertically

// Player structure
struct Player {
    SDL_Rect rect = { 100, 100, TILE_SIZE, TILE_SIZE }; // Initial position and size
    float velocityY = 0.0f;
    bool onGround = false;
};

// Camera structure
struct Camera {
    int x = 0; // X position of the camera
    int y = 0; // Y position of the camera
    int width = SCREEN_WIDTH;
    int height = SCREEN_HEIGHT;
};

// Function to load the map from a file
void loadMap(const std::string& filename, int map[MAP_HEIGHT][MAP_WIDTH]) {
    std::ifstream file(filename);
    if (!file) {
        std::cerr << "Error: Could not open map file." << std::endl;
        return;
    }

    for (int y = 0; y < MAP_HEIGHT; ++y) {
        std::string line;
        if (std::getline(file, line)) {
            for (int x = 0; x < MAP_WIDTH && x < static_cast<int>(line.size()); ++x) {
                map[y][x] = line[x] - '0'; // Convert char to int
            }
        }
    }
}

// Function to update the camera position
void updateCamera(Camera& camera, const Player& player, int mapWidth, int mapHeight) {
    camera.x = player.rect.x + player.rect.w / 2 - camera.width / 2;
    camera.y = player.rect.y + player.rect.h / 2 - camera.height / 2;

    // Clamp camera position to map boundaries
    if (camera.x < 0) camera.x = 0;
    if (camera.y < 0) camera.y = 0;
    if (camera.x + camera.width > mapWidth * TILE_SIZE) camera.x = mapWidth * TILE_SIZE - camera.width;
    if (camera.y + camera.height > mapHeight * TILE_SIZE) camera.y = mapHeight * TILE_SIZE - camera.height;
}

// Function to render the map
void renderMap(SDL_Renderer* renderer, SDL_Texture* blockTexture, const int map[MAP_HEIGHT][MAP_WIDTH], const Camera& camera) {
    int startX = camera.x / TILE_SIZE;
    int startY = camera.y / TILE_SIZE;
    int endX = (camera.x + camera.width) / TILE_SIZE + 1;
    int endY = (camera.y + camera.height) / TILE_SIZE + 1;

    // Clamp ranges to map boundaries
    startX = std::max(0, startX);
    startY = std::max(0, startY);
    endX = std::min(MAP_WIDTH, endX);
    endY = std::min(MAP_HEIGHT, endY);

    // Render only visible tiles
    for (int y = startY; y < endY; ++y) {
        for (int x = startX; x < endX; ++x) {
            if (map[y][x] == 1) { // Render only solid blocks
                SDL_Rect dstRect = {
                    x * TILE_SIZE - camera.x,
                    y * TILE_SIZE - camera.y,
                    TILE_SIZE, TILE_SIZE
                };
                SDL_RenderCopy(renderer, blockTexture, nullptr, &dstRect);
            }
        }
    }
}

// Function to render the player
void renderPlayer(SDL_Renderer* renderer, SDL_Texture* playerTexture, const Player& player, const Camera& camera) {
    SDL_Rect dstRect = {
        player.rect.x - camera.x,
        player.rect.y - camera.y,
        player.rect.w,
        player.rect.h
    };
    SDL_RenderCopy(renderer, playerTexture, nullptr, &dstRect);
}

// Function to handle player movement and gravity
void handlePlayerMovement(Player& player, const int map[MAP_HEIGHT][MAP_WIDTH], float deltaTime) {
    const float GRAVITY = 300.0f;
    const float JUMP_VELOCITY = -400.0f;

    const Uint8* keys = SDL_GetKeyboardState(nullptr);

    // Horizontal movement
    if (keys[SDL_SCANCODE_LEFT]) {
        player.rect.x -= static_cast<int>(400 * deltaTime);
    }
    if (keys[SDL_SCANCODE_RIGHT]) {
        player.rect.x += static_cast<int>(400 * deltaTime);
    }

    // Apply gravity
    player.velocityY += GRAVITY * deltaTime;
    player.rect.y += static_cast<int>(player.velocityY * deltaTime);

    // Collision detection - only check blocks near the player
    player.onGround = false;
    int startX = player.rect.x / TILE_SIZE - 1;
    int endX = (player.rect.x + player.rect.w) / TILE_SIZE + 1;
    int startY = player.rect.y / TILE_SIZE - 1;
    int endY = (player.rect.y + player.rect.h) / TILE_SIZE + 1;

    for (int y = std::max(0, startY); y < std::min(MAP_HEIGHT, endY); ++y) {
        for (int x = std::max(0, startX); x < std::min(MAP_WIDTH, endX); ++x) {
            if (map[y][x] == 1) { // Solid block
                SDL_Rect block = {
                    x * TILE_SIZE,
                    y * TILE_SIZE,
                    TILE_SIZE, TILE_SIZE
                };
                if (SDL_HasIntersection(&player.rect, &block)) {
                    // Handle collision below the player (landing)
                    if (player.velocityY > 0) {
                        player.rect.y = block.y - player.rect.h;
                        player.velocityY = 0;
                        player.onGround = true;
                    }
                }
            }
        }
    }

    // Jumping
    if (player.onGround && keys[SDL_SCANCODE_SPACE]) {
        player.velocityY = JUMP_VELOCITY;
    }
}

int main(int argc, char* argv[]) {
    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        std::cerr << "Error initializing SDL: " << SDL_GetError() << std::endl;
        return 1;
    }
    if (IMG_Init(IMG_INIT_PNG) == 0) {
        std::cerr << "Error initializing SDL_image: " << IMG_GetError() << std::endl;
        SDL_Quit();
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Platformer", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, 0);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    if (!window || !renderer) {
        std::cerr << "Error creating SDL window or renderer: " << SDL_GetError() << std::endl;
        IMG_Quit();
        SDL_Quit();
        return 1;
    }

    SDL_Texture* blockTexture = IMG_LoadTexture(renderer, "block.png");
    SDL_Texture* playerTexture = IMG_LoadTexture(renderer, "player.png");

    if (!blockTexture || !playerTexture) {
        std::cerr << "Error loading textures: " << IMG_GetError() << std::endl;
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        IMG_Quit();
        SDL_Quit();
        return 1;
    }

    int map[MAP_HEIGHT][MAP_WIDTH] = { 0 };
    loadMap("map.txt", map);

    Player player;
    Camera camera;

    Uint32 lastTime = SDL_GetTicks();
    bool running = true;

    while (running) {
        Uint32 currentTime = SDL_GetTicks();
        float deltaTime = (currentTime - lastTime) / 1000.0f;
        lastTime = currentTime;

        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                running = false;
            }
        }

        handlePlayerMovement(player, map, deltaTime);
        updateCamera(camera, player, MAP_WIDTH, MAP_HEIGHT);

        // Clear the screen
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // Render map and player
        renderMap(renderer, blockTexture, map, camera);
        renderPlayer(renderer, playerTexture, player, camera);

        // Present the rendered frame
        SDL_RenderPresent(renderer);
    }

    // Cleanup
    SDL_DestroyTexture(blockTexture);
    SDL_DestroyTexture(playerTexture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    IMG_Quit();
    SDL_Quit();

    return 0;
}
